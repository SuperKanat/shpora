import { transformSync } from 'esbuild';
import path, { extname } from 'path';

const getExt = (str)=>{
    const basename = path.basename(str);
    const firstDot = basename.indexOf('.');
    const lastDot = basename.lastIndexOf('.');
    const extname1 = path.extname(basename).replace(/(\.[a-z0-9]+).*/i, '$1');
    if (firstDot === lastDot) return extname1;
    return basename.slice(firstDot, lastDot) + extname1;
};
const createTransformer = (options)=>({
        process (content, filename) {
            const enableSourcemaps = (options === null || options === void 0 ? void 0 : options.sourcemap) || false;
            const ext = getExt(filename);
            const loader = (options === null || options === void 0 ? void 0 : options.loaders) && (options === null || options === void 0 ? void 0 : options.loaders[ext]) ? options.loaders[ext] : extname(filename).slice(1);
            const sourcemaps = enableSourcemaps ? {
                sourcemap: true,
                sourcesContent: false,
                sourcefile: filename
            } : {
            };
            const result = transformSync(content, {
                loader,
                format: (options === null || options === void 0 ? void 0 : options.format) || 'cjs',
                target: (options === null || options === void 0 ? void 0 : options.target) || 'es2018',
                ...(options === null || options === void 0 ? void 0 : options.jsxFactory) ? {
                    jsxFactory: options.jsxFactory
                } : {
                },
                ...(options === null || options === void 0 ? void 0 : options.jsxFragment) ? {
                    jsxFragment: options.jsxFragment
                } : {
                },
                ...sourcemaps
            });
            let { map , code  } = result;
            if (enableSourcemaps) {
                map = {
                    ...JSON.parse(result.map),
                    sourcesContent: null
                };
                // Append the inline sourcemap manually to ensure the "sourcesContent"
                // is null. Otherwise, breakpoints won't pause within the actual source.
                code = code + '\n//# sourceMappingURL=data:application/json;base64,' + Buffer.from(JSON.stringify(map)).toString('base64');
            } else {
                map = null;
            }
            return {
                code,
                map
            };
        }
    })
;

export { createTransformer };
